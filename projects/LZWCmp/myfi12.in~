LZW Compressor
Specification


1. Overview

This assignment creates a Compress application that LZW-compresses one or more files, to a format compatible with the TestExp utility that will be supplied as an executable.


This requires implementation of an LZWCmp.h/c file pair, driven by a main program in a Compress.c file, and using the CodeSets.c file you built in a lab. The main accepts one or more filenames as commandline arguments, and uses LZWCmp to compress each, outputting the compressed data to files, as a series of 32-bit integers in hexadecimal, comprising the LZW codes that may in turn be read and decompressed by TestExp.


You are expected already to understand LZW compression from website references, in-class lectures and exercises and from the companion lecture to this specification.


2. General Requirements

Write two files, Compress.c and LZWCmp.c. Use also your CodeSets.c file from an earlier exercise, along with the CodeSets.h file supplied in the project materials.


LZWCmp.c

LZWCmp.c gives implementations of the five LZW functions defined in the LZWCmp.h file, and may include additional static functions to support those five LZW functions. See the LZWCmp.h file for details on these.
Compress.c

Compress.c contains a main program, and a CodeSink function, to work with the LZWCmp.c file. It can be run thus:


Compress file1 file2 ...


Compress produces a compressed data file with a .Z suffix for each file listed in the commandline arguments: thus file1.Z, file2.Z, etc.


Compress.c also takes several commandline flag arguments. These are provided, prefixed with a -, before any filenames. So one might run Compress thus:


Compress -t -c file1 file2...


or


Compress -tcb file1 file2...
