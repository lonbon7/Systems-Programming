#include <stdlib.h>
#include <assert.h>
#include <stdio.h>
#include "SmartAlloc.h"
#include "List.h"

typedef struct Node {
   double data;
   struct Node *next;
} Node;

static Node *freeList = NULL;

static Node *newNode() {
   Node *temp;
   
   if (freeList) {
      temp = freeList;
      freeList = temp->next;
   }
   else
      temp = malloc(sizeof(Node));
	  
   return temp;
}

static void freeNode(Node *toFree) {
   toFree->next = freeList;
   freeList = toFree;
}

//Start here
static List *lists = NULL;

struct List {
   Node *head;
   Node *at;
   struct List *next;
   int count;
};

List *ListCreate() {
   List *temp = calloc(sizeof(List), 1);
   temp->next = lists;
   lists = temp;
   return temp;
}

void ListDestroy(List *list) {    
   Node *temp;
   List *cursor = lists;
   
   if (list = lists) {
      //printf("Made it into the if statement in ListDestroy\n");
      lists = lists->next;
      //printf("Made it past lists = lists->next\n");
   }
   else {
      while (cursor->next != list) {
        //printf("Made it into the first while in ListDestroy\n");
         cursor = cursor->next;
      }
      cursor->next = cursor->next->next;
   }
  // printf("Made it past the first while loop in ListDestroy\n");
  
   //printf("Made it past cursor->next = cursor->next->next\n");

   while (list->head) {
      temp = list->head;
      list->head = temp->next;
      free(temp);
   }
   free(list);
}

void ListDestroyAll() {
   Node *tempNode;
   List *tempList;
   
   while (lists) {
      tempList = lists;
      while (lists->head) {
         tempNode = lists->head;
         lists->head = tempNode->next;
         free(tempNode);
      }
      lists = lists->next;
      free(tempList);
   }
}

//End here

void ListPrintList() {
   List *temp = lists;
   int count = 0;
   printf("List values:");
   while (temp) {
      count++;
      printf(" %lf", temp->head->data);
      temp = temp->next;
   }
   printf("\n");
   printf("Number of items in the list: %d\n", count);
}

int ListGetCount(List *list) {
   return list->count;
}

void ListAdd(List *list, double toAdd, ListAddType where) {
   Node *last, *temp = malloc(sizeof(Node));

   temp->data = toAdd;
   list->count++;   
   if (where == LIST_AT_START) {
      temp->next = list->head;
      list->head = temp;
   }
   else {
      for (last = list->head; last && last->next; last = last->next)
	      ;
      if (last)
	      last->next = temp;
      else
         list->head = temp;
	   temp->next = NULL;
   }
}
   
int ListDrop(List *list, double toDrop) {
   Node *prior = NULL, *temp;
   
   for (temp = list->head; temp && temp->data != toDrop; temp = temp->next)
      prior = temp;
   if (temp) {
      if (prior)
	      prior->next = temp->next;
      else
	      list->head->next = temp->next;
	   freeNode(temp);
      list->count--;
   }
}

void ListStart(List *list) {
   list->at = list->head;
}

int ListHasNext(List *list) {
   return list->at != NULL;
}

double ListCurrent(List *list) {
   assert(list->at != NULL);
   return list->at->data;
}

void ListAdvance(List *list) {
   assert(list->at != NULL);
   list->at = list->at->next;
}

void ListClearFreelist() {
   Node *temp;
   
   while (freeList) {
      temp = freeList;
      freeList = temp->next;
      free(temp);
   }
}
