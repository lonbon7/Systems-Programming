#include <stdio.h>
#include <ctype.h>
 
#define MAXDIM 10
#define MAXCHAR 'F'
#define NUMPARAMS 3

static int seed;

// This will return a different random nonnegative integer on
// each successive call.
int rand() {
   seed = (seed * 131071 + 524287) % 8191;
   return seed;
}

// Call this just once in the entire program, with the seed.
void srand(int s) {
   seed = s;
}

void initialize(char model[], int dimensions, char maxchar);
int match(char model[], char guess[], int dimensions);
int non_blank();
int get_guess(char guess[], int dimensions, char maxchar, int try);

/* Initialize "model" to contain a random pattern of "dimensions"
 * letters, in the range 'A' to "maxchar".
*/
void initialize(char model[], int dimensions, char maxchar) {
   int i, result;
  
   for (i = 0; i < dimensions; i++) {
      result = rand() % (maxchar - 'A' + 1)  + 'A';     
      model[i] = result;
   }     
}
 
/* Compare "model" to "guess", assuming each contains "dimensions"
 * characters.  Print out the number of exact and inexact matches.
 * Returns the number of exact matches. 
 */
int match(char model[], char guess[], int dimensions) {
   int inexact = 0, exact = 0, i, j;   
   char tempModel[dimensions], tempGuess[dimensions];
   
   printf("\nmodel in match: ");
   for (i = 0; i < dimensions; i++)
      printf("%c", model[i]);
   printf("\n");
   printf("guess in match: ");
   for (i = 0; i < dimensions; i++)
      printf("%c", guess[i]);
   printf("\n");



   for (i = 0; i < dimensions; i++) {
      tempModel[i] = model[i];
      tempGuess[i] = guess[i];
   }
  
   
   for (i = 0; i < dimensions; i++) {
      if (tempModel[i] == tempGuess[i]) {
         exact++;
         tempModel[i] = tempGuess[i] = '0';
      }
   }
   
   for (i = 0; i < dimensions; i++) {
      for (j = 0; j < dimensions; j++) {
         if (tempModel[i] != '0' && tempGuess[j] != '0' && tempModel[i] == tempGuess[j]) {
            inexact++;
            tempModel[i] = tempGuess[j] = '0';
         }
      }
   }
   
   printf("    %d Exact and %d Inexact\n", exact, inexact);
   return exact;
}
 
/* Return the next non_blank character from the input.  Return EOF if
 * you hit EOF while trying to find the next nonblank character
 */
int non_blank(void) {
   int result;
   
   do {
      result = getchar();
   } while (result != EOF && !isalpha(result));
    
   if (result != EOF)
      result = toupper(result);
   
   return result;
}  
 
/* Input the user's guess, putting it into "guess".  Assume that
 * there will be "dimensions" characters in the guess, in the range
 * 'A' to "maxchar".  Assume that this is the "try"th attempt on the
 * user's part.  If a guess with the wrong format or characters is
 * entered, make the user try again until a valid guess is entered.
 * After each guess, read and discard any extra characters up to and
 * including the end of line.  Return true if a guess is obtained, 
 * false if EOF is hit while trying to get a good guess.
 */
int get_guess(char guess[], int dimensions, char maxchar, int try) {
   int index = 0, result;     
  
   printf("\n %d. Enter your guess: ", try);   
   
   while ((result = non_blank()) != EOF && index < dimensions) {
      if (!isalpha(result) || result > maxchar) {
          while ((result = getchar()) != EOF && result != '\n')
            ;
         index = 0;
         printf("    Bad entry.  Try again: ");        
      }
      else {         
         guess[index++] = result;
      }
   }
   
   printf("\nguess in get_guess: ");
   for (index = 0; index < dimensions; index++)
      printf("%c", guess[index]);
   printf("\n");
   index = 0;
   
   while ((result = non_blank()) != EOF && index < dimensions) {
      if (!isalpha(result) || result > maxchar) {
          while ((result = getchar()) != EOF && result != '\n')
            ;
         index = 0;
         printf("    Bad entry.  Try again: ");        
      }
      else {         
         guess[index++] = result;
      }
   }
   
   printf("\nnext guess in get_guess: ");
   for (index = 0; index < dimensions; index++)
      printf("%c", guess[index]);
   printf("\n");
    return 1;
    
   while ((result = getchar()) != EOF && result != '\n')
      ;
   if (result == EOF && index < dimensions)
      result = 0;
   else
      result = 1;
  
   return result;      
}
 
int main() {
   char maxchar, answer = 'Y';
   int dim, mainSeed, trys = 0, result, count = 0;
   char pattern[MAXDIM], guess[MAXDIM];
   double totalTrys = 0;
   
   printf("Enter maxchar, dimensions, and seed => ");      
   result = scanf(" %c %d %d", &maxchar, &dim, &mainSeed); 
   maxchar = toupper(maxchar);  
   
   if (maxchar <= MAXCHAR && dim <= MAXDIM && result == NUMPARAMS && dim > 0 && maxchar >= 'A') {
      srand(mainSeed);
     
      while (answer == 'Y' || answer == 'y') {
         initialize(pattern, dim, maxchar);
         count++;
         
         do {
            trys++;
            totalTrys++;
            if (!get_guess(guess, dim, maxchar, trys)) {
               printf("Unexpected EOF\n");
               answer = 'N';
               break;
            }             
         } while (match(pattern, guess, dim) != dim);
         
         if (answer == 'N')
            break;
            
         trys = 0;
         printf("\n\nCurrent average:  %.3lf\n", totalTrys/count);
         printf("\nAnother game [Y/N]? ");
         answer = getchar();         
          
         if (answer == EOF) {
            printf("Unexpected EOF\n");
            break;
         }
      }
   }
   else
      printf("Bad initial values\n");

   return 0;  
}
